#!/usr/bin/env python

import cabal_log
import rules
import re
import os
import sys


def analyze_error(allrules, error):
  for r, spec in allrules:
    if r.check(error):
      return spec
  return None

def find_errors(contents):
  """Return the errors found in a log file."""
  errors = []
  lines = contents.split("\n")
  cabal_log.parse_errors(lines, errors)
  cabal_log.parse_multiline_errors(contents, errors)
  return errors

def process_log_contents(allrules, path, contents):
    errors = find_errors(contents)
    unresolved = []
    specs = []
    if errors:
      for e in errors:
        s = analyze_error(allrules, e)
        if not s:
          unresolved.append(e)
        else:
          specs.append(s)
    print "file:", path
    for s in specs:
      for ss in s:
        print " -", ss
    if unresolved:
      print "unresolved errors:"
      for e in unresolved:
        print " -", e
    print

def process_log_file(allrules, path):
    with open(path) as f: contents = f.read()
    process_log_contents(allrules, path, contents)

def main():
  with open("all-rules") as f:
    lines = f.readlines()
  allrules = rules.parse_rules(lines)
  # for r,s in allrules: print r

  for path in sys.argv[1:]:
    process_log_file(allrules, path)

main()

