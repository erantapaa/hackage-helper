#!/usr/bin/env python

import re
import os
import sys
import argparse
import cabal_log
import rules

def analyze_error(allrules, error):
  for r, spec in allrules:
    if r.check(error):
      return spec
  return None

def find_errors(contents):
  """Return the errors found in a log file."""
  errors = []
  lines = contents.split("\n")
  cabal_log.parse_errors(lines, errors)
  cabal_log.parse_multiline_errors(contents, errors)
  return errors

def analyze_errors(allrules, contents):
  errors = find_errors(contents)
  unresolved = []
  specs = []
  if errors:
    for e in errors:
      s = analyze_error(allrules, e)
      if not s:
        unresolved.append(e)
      else:
        specs.append(s)
  return (errors, unresolved, specs)

def process_log_contents(opts, allrules, path, contents):
    errors, unresolved, specs = analyze_errors(allrules, contents)
    if not errors:
      if opts.v:
        print "file: {} - No errors found.".format(path)
    else:
      print "file:", path

      multispecs = []
      singles = set()

      for s in specs:
        if len(s) == 1 and s[0].suite is None:
          singles.add( s[0].pkgname )
        else:
          multispecs.append(s)

      for pkgname in singles:
        print " -", pkgname
      for ms in multispecs:
        for s in ms:
          print " -", str(s.suite) + ": " + s.pkgname
      if unresolved:
        print "unresolved errors:"
        for e in unresolved:
          print " -", e
      print

def process_log_file(opts, allrules, path):
    if path == "-":
      contents = sys.stdin.read()
      pname = "(stdin)"
    else:
      with open(path) as f: contents = f.read()
      pname = path
    process_log_contents(opts, allrules, pname, contents)

def main():
  parser = argparse.ArgumentParser(description='Analyze GHC log files')
  parser.add_argument('-v', action='store_true',  help="verbose output")
  parser.add_argument('files', metavar='FILE', type=str, nargs='*',
                       help="log files")
  opts = parser.parse_args()

  if not opts.files:
    opts.files = ['-']

  with open("all-rules") as f:
    lines = f.readlines()
  allrules = rules.parse_rules(lines)

  for path in opts.files:
    process_log_file(opts, allrules, path)

main()

